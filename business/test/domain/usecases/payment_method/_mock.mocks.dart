// Mocks generated by Mockito 5.0.8 from annotations
// in business/test/domain/usecases/payment_method/_mock.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:business/src/core/errors/failure.dart' as _i5;
import 'package:business/src/domain/entities/payment_method.dart' as _i6;
import 'package:business/src/domain/repositories/payment_method_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [IPaymentMethodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPaymentMethodRepository extends _i1.Mock
    implements _i3.IPaymentMethodRepository {
  MockIPaymentMethodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.PaymentMethod>>>
      getAllPaymentMethods() => (super.noSuchMethod(
          Invocation.method(#getAllPaymentMethods, []),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i6.PaymentMethod>>>.value(
                  _FakeEither<_i5.Failure, List<_i6.PaymentMethod>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.PaymentMethod>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.PaymentMethod>> getPaymentMethodById(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getPaymentMethodById, [id]),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.PaymentMethod>>.value(
              _FakeEither<_i5.Failure, _i6.PaymentMethod>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.PaymentMethod>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> insertPaymentMethod(
          _i6.PaymentMethod? paymentMethod) =>
      (super.noSuchMethod(
              Invocation.method(#insertPaymentMethod, [paymentMethod]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> updatePaymentMethod(
          _i6.PaymentMethod? paymentMethod) =>
      (super.noSuchMethod(
              Invocation.method(#updatePaymentMethod, [paymentMethod]),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deletePaymentMethodWithId(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#deletePaymentMethodWithId, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> countExpensesWithPaymentMethodWithId(
          String? id) =>
      (super.noSuchMethod(
              Invocation.method(#countExpensesWithPaymentMethodWithId, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, int>>.value(
                  _FakeEither<_i5.Failure, int>()))
          as _i4.Future<_i2.Either<_i5.Failure, int>>);
}
